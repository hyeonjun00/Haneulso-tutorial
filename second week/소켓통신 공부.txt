

 



소켓 프로그래밍을 공부하는 이유는 임베디드 시스템과 네트워크 통신을 결합하여 다양한 임베디드 애플리케이션을 개발하고 제어하는 데 필요한 기술을 습득하기 위해서이다.
 임베디드 시스템은 제한된 자원을 가진 작고 특화된 컴퓨터 시스템으로, 네트워크 연결을 통해 통신하고 데이터를 교환하는 기능을 가질 때 많은 이점을 제공한다.

<임베디드 시스템에서 소켓 프로그래밍을 공부하는 이유?

원격 제어 및 모니터링

임베디드 시스템은 종종 실시간으로 제어되어야 하며, 센서 데이터를 수집하고 외부로 전송해야 할 때가 있다. 
소켓 프로그래밍을 배우면 원격으로 임베디드 시스템을 제어하고 모니터링하는 기능을 구현할 수 있다.

분산 시스템 
여러 개의 임베디드 시스템을 네트워크로 연결하여 분산 시스템을 구성할 수 있다. 
이를 통해 여러 장치 간의 협력과 통신을 가능하게 하며, 복잡한 기능을 구현할 수 있다.

데이터 공유
임베디드 시스템 간 데이터를 공유하고 동기화하는 것이 중요할 때가 있다. 소켓 프로그래밍을 사용하여 데이터를 안전하고 효율적으로 교환할 수 있다.

IoT (사물 인터넷) 애플리케이션:
IoT 환경에서 임베디드 시스템은 서로 연결되어 데이터를 수집, 분석하고 조작하는 역할을 한다. 소켓 프로그래밍을 이용하여 IoT 애플리케이션을 개발하고 관리할 수 있다.

통신 프로토콜 구현
임베디드 시스템은 다양한 통신 프로토콜을 구현하고 사용해야 할 때가 있다. 
소켓 프로그래밍을 이용하면 사용자 정의 프로토콜을 개발하거나 이미 존재하는 프로토콜을 구현할 수 있다.

보안과 안정성
임베디드 시스템의 통신은 종종 보안과 안정성 문제에 노출된다. 소켓 프로그래밍을 이용하여 암호화, 인증 등의 보안 기능을 구현하고 데이터 무결성을 보장할 수 있다.

정리 하자면, 소켓 프로그래밍을 임베디드 시스템과 결합하면 다양한 분야에서 효과적으로 활용할 수 있는 기술을 배우게 된다. 
이를 통해 자동차, 가전 제품, 산업 자동화, 스마트 홈 등 다양한 분야에서 네트워크를 통한 통신과 제어를 구현할 수 있다.




<소켓의 본질에 대한 이해>
소켓의 본질은 파일이다.
소켓(Socket)은 OS커널에 구현되어 있는 프로토콜 요소에 대한 추상화된 인터페이스.            
장치파일의 일종으로 이해할 수 있다. 일반파일에 대한 개념이 대부분 적용된다. 
소켓은 프로세스가 드넓은 네트워크 세계로 데이터를 내보내거나 혹은 그 세계로 부터 데이터를 받기 위한 실제적인 창구 역할을 한다.
그러므로 프로세스가 데이터를 보내거나 받기 위해서는 반드시 소켓을 열어서 소켓에 데이터를 써보내거나 소켓으로부터 데이터를 읽어 들여야 한다. 
소켓은 프로토콜, IP주소, 포트 넘버로 정의된다.
다시 말해 소캣은 떨어져 있는 두 호스트를 연결해주는 도구로써 인터페이스의 역할을 하는데 데이터를 주고받을 수 있는 구조체로 소켓을 통해 데이터 통로가 만들어진다. 소켓은 네트워크에서 실행중인 두 프로그램의 양방향 통신 끝점으로, 즉 통신의 끝과 끝이다.
이러한 소켓은 역할에 따라 서버소켓, 클라이언트 소켓으로 구분된다.


포트와 IP 주소는 컴퓨터 네트워킹에서 중요한 개념이다. 이들은 컴퓨터가 네트워크 상에서 통신할 때 사용되는 주요 구성 요소이다.

IP 주소(Internet Protocol Address):
IP 주소는 인터넷 프로토콜(IP)을 사용하는 네트워크에서 각각의 장치를 식별하는 데 사용되는 고유한 숫자 주소입니다. IP 주소는 네트워크 상에서 데이터를 보내고 받을 때 해당 장치의 위치를 지정하며, 전 세계적으로 고유한 주소를 갖습니다.

IPv4와 IPv6 두 가지 주요 IP 주소 형식이 있습니다.
IPv4 주소: 예를 들어, 192.168.1.1과 같은 형식을 가집니다. 이는 32비트 숫자로 구성되며 주로 네 개의 0에서 255 사이의 숫자 그룹으로 표현됩니다.
IPv6 주소: 보다 많은 주소 공간을 제공하기 위해 도입된 새로운 형식으로, 예를 들어 2001:0db8:85a3:0000:0000:8a2e:0370:7334와 같이 콜론(:)으로 분리된 128비트의 숫자 그룹으로 표현됩니다.

포트(Port):
포트는 네트워크 통신에서 프로세스나 서비스를 식별하는 데 사용되는 숫자입니다. 한 컴퓨터에는 여러 개의 포트가 있을 수 있으며, 각 포트는 고유한 번호를 가지고 다른 서비스나 프로세스와 구분됩니다. 포트 번호는 0부터 65535까지의 범위를 가지며, 일부 범위는 특정 용도로 예약되어 있습니다.
예를 들어, 웹 서버는 일반적으로 80번 포트를 사용하며, 이메일 서버는 보통 25번 포트를 사용합니다. 특정 포트에 도착한 데이터는 해당 포트에 연결된 서비스나 프로세스로 전달됩니다.
IP 주소와 포트 번호를 결합하면 특정 네트워크 서비스에 접속할 수 있습니다. 이를 통해 컴퓨터는 인터넷 상의 다른 컴퓨터와 통신하고 데이터를 주고받을 수 있습니다.




//
 *프로토콜: 여러컴퓨터나 단말기 사이에서 데이터 통신을 원활하게 하기위해 필요한 통신규약,약속
 프로토콜 종류로는
응용계층 : HTTP SMTP FTP Telnet
표현계층: ASCII MPEG JPEG MIDI 
세션계층: SAP, SDP, NetBIOS
전송계층: TCP, UDP, SPX
네트워크 계층: IP, IPX
데이터 링크계층: Ethernet, FDDI
물리계층: 없음

*IP : 전세계 컴퓨터에 부여된 고유의 식별주소

*포트: 네트워크 상에서 통신하기 위해 호스트 내부적으로 프로세스가 할당받아야 하는 고유한 숫자. 한 호스트 내에서 네트워크 통신을 하고있는 프로세스를 식별하기 위해 사용되는 값이므로, 
같은 호스트 내에서 서로 다른 프로세스가 같은 포트넘버를 가질수 없다. 즉 같은 컴퓨터내에서 프로그램을 식별하는 번호.


//



<소켓통신의 흐름>

서버(server)
클라이언트 소켓의 연결 요청을 대기하고, 연결 요청이 오면 클라이언트 소켓을 생성하여 통신이 가능하게 한다.

1) socket()함수를 이용하여 소켓을 생성 
2)bind()함수로 ip와 port번호를 설정
3)listen()함수로 클라이언트의 접근 요청에 수신대기열을 만들어 몇개의 클라이언트를 대기 시킬지 결정
4)accept()함수를 사용하여 클라이언트와의 연결요청을 수락함

클라이언트(Client)
실제로 데이터 송수신이 일어나는 것은 클라이언트 소켓이다

1)socket()함수로 가장 먼저 소켓을 연다.
2)connect()함수로 통신할 서버의 설정된 ip주소와 port번호에 통신을 시도
3)통신을 시도 시, 서버가 accept()함수를 이용하여 클라이언트의 socket descriptor를 반환
4)이를 통해 클라이언트와 서버가 서로 read(), write()를 하며 통신(이과정을 반복)


HTTP통신과 SOCKET 통신의 비교

HTTP 통신의 특징
client가 요청을 보내는 경우에만 server가 응답하는 단방향 통신이다. 서버로부터 응답을 받은 후에는 연결이 바로 종료된다.
실시간 연결이 아니고 필요한 경우에만 서버로 요청을 보내는 상황에 유용하다.
요청을 보내 서버의 응답을 기다리는 어플리케기션의 개발에 주로 사용


SOCKET 통신의 특징
서버와 클라이언트가 계속 연결을 유지하는 양방향통신이다. 서버와 클라이언트가 실시간으로 데이터를 주고받는 상황이 필요한 경우에 사용된다. 실시간 동영상 스트리밍이나 온라인 게임등과 같은 경우에 자주 사용



<소켓프로그래밍>



1.소켓 생생하기

#include <sys/socket.h>  //#include <sys/types.h>
int socket(int domain, int type, int protocol);  
//실패 시 -1 반환 성공시 -1이외의 값 반환, 소켓 식별자 또는 소켓 디스크립터 생성

*파일디스크립터: unix os에서 네트워크 소캣과 같은 파일이나 기타 입력/ 출력 리소스에 엑세스 하는데 사용되는 추상표현, 즉 시스템으로부터 할당핟은 파일이나 소켓을 대표하는 정수!


domain: IPv4 인터넷 프로토콜을 사용(PF_INET, AF_INET),       IPv6인터넷 프로토콜을 사용(PF_INET6),  같은 시스템 내의 프로세스끼리 통신에 사용(PF_LOCAL, AF_UNIX)
type :  TCP/IP 프로토콜을 사용(SOCK_STREAM)     UDP/IP 프로토콜을 사용(SOCK_DGRAM)
protocol:  데이터를 전송하는데 사용되는 프로토콜 지정(0을 입력해도 소켓은 생성된다.)
	IPPROTO_TCP: TCP를 기반으로 하는 소켓 생성
	IPPROTO_UDP: UDP를 기반으로 하는 소켓 생성


ex)
int Sock;
Sock = socket(PF_INET, SOCK_STREAM, 0);
if (Sock == -1){
	printf("소켓생성 실패!/n")
	exit(1) // 오류에 의한 강제 종료
}






2.binding

#include <sys/socket.h>   			 //#include <sys/types.h>
int bind(int sockfd, struct sockaddr *myaddr, socklen_t addrlen):
// 주소 할당 성공시 0반환 , 실패시 -1반환

sockfd: 소켓 식별자 또는 소켓 디스크립터
sockaddr: 주소 정보 할당 
myaddr: 할당하고자 하는 주소정보를 지니는 구조체 변수의 주소 값
addrlen: 두번째 인자로 전달된 구조체 변수의 길이정보
--> 함수호출 성공하면 첫번째 인자에 해당하는 소켓에 두번째 인자로 전달된 주소 정보가 할당된다. 

ex)
#include <sys/socket.h>
#include <string.h> //memset()사용

int serv_sock;
struct sockaddr_in serv_addr;
char*serv_port = "1234";

serv_sock = socket(PF_INET, SOCK_STREAM, 0);   //서버소켓 생성

//주소정보 초기화
memset(&serv_addr, 0, sizeof(serv_addr)); //   memory+setting   선언 후에 메모리 영역을 원하는 자료형으로 초기화 시켜서 가비지값 입력으로 발생하는 에러 제거 
serv_addr.sin_family = AF_INET;
serv_addr.sin_addr.s_addr = htonl(INADDR_ANY);
serv_addr.sin_port = htonl(atoi(serv_port));   //atoi() 문자열을 정수값으로 변환.

//주소정보 할당
bind(serv_sock, (struct sockaddr)&serv_addr, sizeof(serv_addr));




3. listen 

#include <sys/socket.h>
int listen(int sockfd, int backlog);
// 성공시 0, 실패시 -1반환  

sockfd : 소켓 식별자 또는 소켓 디스크립터
backlog: 연결 요청을 대기시킬 공간 설정, 어느 정도의 크기가 효율적인지는 정해진 바가 없다. 네트워크 상태와 서비스 종류에 따라 달라진다. 보통 5정도 둠


ex) 
if (-1 == listen(Sock, 5){
	printf("listen() 에러 발생!);
	exit(1);
}




4.accept

#include <sys.socket.h>     //<sys.types.h>
int accept(int sockfd, struct sockaddr *addr, soklen_t * addrlen);    //클라이언트의 접속요청을 받아들이고 클라이언트와 통신하는 전용 소켓 생성
//성공시 파일 디스크립터, 실패 시 -1 반환. 

sockfd : 소켓 식별자 또는 소켓 디스크립터
struct sockaddr *addr : 클라이언트 주소 정보를 담을 구조체
soklen_t * addrlen: 클라이언트 주소 정보를 담을 구조체 크기

ex)
int client_sock;
struct sockaddr_in client_addr;
int client_addr_size;
client_addr_size = sizeof(client_addr);

client_sock = accept(server_sock,(struct sockaddr*)&client_addr, &client_addr_size);
if(-1 == client_sock){
	printf("accept()함수 에러");
	eixt(1);
}



htonl()함수 
호스트에서 TCP/IP 네트워크 바이트 순서인 big -endian 으로 변환한다.(host방식의 order를 네트워크 order로 변환)

INADDR_ANY 자동으로 이 컴퓨터에 존재하는 랜카드중 사용가능한 랜카드의 ip주소를 사용하라는 의미, 자동할당을 통해 직접 ip주소를 입력하지 않아도 되는 편리함




sequence

1. creating the socket(socket function call)
2. bind the socket to a port(bind function call)
3.listen for incoming connection requests & identify ones(listen function call)
4.accept rhe identified connection request and open the socket(accept function call)


리눅스 기반 컴파일

터미널을 두개를 연다. 

<서버측>
gcc hello_server.c -o hello_server_exe
./hello_server_exe 9190 //서버프로그램 실행 , 포트번호 기입


<클라이언트 측>
gcc hello_client.c  -o hello_client_exe
./hello_client_exe 127.0.0.1 9190     // 127.0.0.1: local computer's address




int main(int argc, char *argv[])

 C 및 C++ 프로그래밍 언어에서 프로그램의 진입점(entry point)을 정의하는 함수 시그니처입니다. 
이 함수는 프로그램이 실행될 때 가장 먼저 호출되며, 프로그램의 시작점을 나타냅니다. 이 함수를 통해 프로그램의 실행 흐름을 제어하고 명령행 인수(command-line arguments)를 처리할 수 있습니다.

int argc: 이 매개변수는 프로그램이 실행될 때 전달되는 명령행 인수의 개수(argument count)를 나타냄
프로그램이 실행될 때 명령행 인수가 전달되지 않으면 argc는 1로 설정됩니다. 만약 명령행 인수가 전달되면, argc는 해당 인수의 개수 + 1이 됩니다.

char *argv[]: 이 매개변수는 명령행 인수의 실제 값(argument values)을 가리키는 문자열 배열입니다. 
argv[0]는 프로그램의 실행 경로를 나타내는 문자열이고, argv[1]부터는 전달된 명령행 인수들의 값을 가리키는 문자열입니다. 따라서 argv[1], argv[2], ... 등을 사용하여 명령행 인수에 접근할 수 있습니다.

함수 시그니처 int main(int argc, char *argv[])을 사용하여 명령행 인수를 처리하려면 일반적으로 다음과 같은 방식으로 코드를 작성합니다:

#include <stdio.h>

int main(int argc, char *argv[]) {
    // 프로그램 실행 시 전달된 명령행 인수 처리
    for (int i = 0; i < argc; i++) {
        printf("argv[%d]: %s\n", i, argv[i]);
    }

    return 0;
}
위 코드는 전달된 명령행 인수를 출력하는 예제입니다. 프로그램을 실행할 때 명령행에 인수를 추가하면, 해당 인수들이 출력될 것입니다.

즉, int main(int argc, char *argv[]) 함수를 사용하여 프로그램이 명령행 인수를 받아 처리하거나 다양한 작업을 수행하도록 시작할 수 있다.




day2 


socket(domain, type, protocol)

first socket descriptor is created, then server socket is "bound to a port", then client socket is "connected to an address+port"


server socket workflow:
Socket() --> Bind()-->Listen()--->Accept()

client socket workflow:
Socket()-->connect()-->recv()

Internet(Logical) Address + Port => Socket


goal:
we need ro specify a IPv4 address(as it is used the most)
we need to set the port address in both ends of the socket(meaning that sendint and receiving sockets must have the same port number)

struct sockaddr_in -->socket address internet ( sa_family = socket address family)
sin_XXXXX --> socket internet XXXXX("XXXXx" can be family, port, address, zero= useless)


<IP Address + Port>
struct sockaddr_ in 
{
	sa_family_t	sin_family;
	uint16_t 		sin_port;
	struct in_addr	sin_addr;
	char		sin_zero[8];
};   		


<IP Address>
struct in_addr
{
	in_addr_t		s_addr;
};



<Members of sockaddr_in>

*sin_family:	address family(almost always AF_INET)
*sin_port :	port number
*sin_addr:	IPv4 address
*sin_zero:		no special meaning => not used



where sockaddr_in is used the socket programming code(server socket example)


struct sockaddr_in serv_addr;
......

if(bind(serv_sock, (struct sockaddr*)&serv_addr, sizeof(serv_addr)) == -1){
  /변수 server_address의 주소를 가리키는 struct sockaddr* 타입의 포인터를 생성하는 것을 의미.
	
	erro_handling("bind() error");
}
......


//아래의 구조체를 참조
struct sockaddr
{
	sa_family_t	 sin_family;  // 주소체계(Address Family)
	char		sa_data[14]; //주소 정보
};




ex)

#include <stdio.h>
#include <netinet/in.h> // sockaddr_in 구조체가 정의되어 있는 헤더 파일

int main() {
    struct sockaddr_in server_address;
    server_address.sin_family = AF_INET;
    server_address.sin_port = htons(1234);5
    server_address.sin_addr.s_addr = INADDR_ANY;

    struct sockaddr* addr_ptr = (struct sockaddr*) &server_address;
    
    // 이제 addr_ptr은 struct sockaddr* 타입의 포인터(구조체 포인터)이며, 서버 주소 정보를 가리킨다.
    // 이렇게 가리키는 이유는 addr_ptr을 통해 다양한 주소 구조체를 다룰 수 있기 때문이다. 


    /*    struct sockaddr*addr_ptr;   구조체 포인터 선언
          addr_ptr = &server_address;  이제 addr_ptr은 server_address의 주소를 담고있는 구조체 포인터  
    */	
    return 0;
}




Internet Address representation in C

Depending on CPU can interpret the internet address in decimal using either Little or Big Endian(order of bytes)


*
빅 엔디안(Big Endian)과 리틀 엔디안(Little Endian)은 컴퓨터 아키텍처에서 데이터를 메모리에 저장하는 방식을 나타내는 두 가지 주요 형태, 이것은 바이트 순서(Byte Order)라고도 불리며, 
데이터의 다중 바이트를 메모리에 저장할 때 바이트의 순서를 나타낸다.

<빅 엔디안(Big Endian)>
빅 엔디안 방식에서는 가장 높은 자리의 바이트가 가장 낮은 주소에 저장된다. 즉, 가장 중요한 바이트(Most Significant Byte, MSB)가 먼저 메모리에 저장.
사람이 숫자를 읽는 방식과 유사하게 가장 큰 단위인 첫 번째 바이트부터 순서대로 저장되는 방식

<리틀 엔디안(Little Endian)>
리틀 엔디안 방식에서는 가장 낮은 자리의 바이트가 가장 낮은 주소에 저장된다. 즉, 가장 중요하지 않은 바이트(Least Significant Byte, LSB)가 먼저 메모리에 저장.
리틀 엔디안 방식은 역순으로 저장되는 것처럼 보이며, 데이터의 낮은 비트가 메모리의 낮은 주소에 더 가깝게 위치한다.

빅 엔디안과 리틀 엔디안은 주로 다중 바이트 데이터(예: 정수, 부동 소수점 수)를 저장할 때의 순서를 나타낸다. 예를 들어, 0x12345678 이라는 4바이트 정수를 메모리에 저장한다고 가정하면,
빅 엔디안: 12 34 56 78 (가장 큰 단위인 12가 먼저 저장)
리틀 엔디안: 78 56 34 12 (가장 작은 단위인 78이 먼저 저장)
CPU 아키텍처마다 기본적으로 사용하는 엔디안 방식이 다를 수 있다. x86 아키텍처는 주로 리틀 엔디안을 사용하며, 몇몇 RISC 아키텍처는 빅 엔디안을 사용한다. 
네트워크 통신에서는 주로 빅 엔디안이 사용되며, 이러한 차이로 인해 데이터를 주고받을 때 엔디안 변환 작업이 필요할 수 있다.  ----> htons, htonl이 필요한 이유! 
htons는 4바이트(32비트) long 정수 표현, htons는 2바이트(16비트) short 정수 표현,  따라서 htons 함수를 사용할 때는 반드시 16비트(short) 정수의 범위 내에서 작업하도록 주의해야 합니다. 
오류로 간주되진 않지만 잘못된 데이터 표현을 일으킨다 만약 16비트보다 큰 데이터를 변환해야 한다면, htonl 함수를 사용하여 32비트(long) 정수로 변환하고, 필요한 부분을 추출하거나 다른 방법을 사용해야 할 것입니다.

htonl은 "Host to Network Long"의 약어로 (htons -->host to network short)  호스트 엔디안에서 네트워크 엔디안으로 정수를 변환하는 역할을 한다.
 네트워크 통신에서는 보통 빅 엔디안 방식이 사용되기 때문에, 호스트 엔디안 시스템에서 생성된 정수 데이터를 빅 엔디안으로 변환해야 한다.
반대로, 네트워크에서 호스트로 데이터를 수신할 때는 ntohl 함수를 사용하여 네트워크 엔디안에서 호스트 엔디안으로 변환한다.  <arpa/inet.h> 헤더파일에 정의되어 있다.




TCP vs UDP 

TCP sockets are referred to as "connection oriented" sockets (TCP: Transmission Control Protocol)
UDP sockets are referred ro as "connectionless" sockets  (UDP: User Datagram Protocol)
TCP protocol guarantees complete transmission of data, while UPD doesn't 






TCP와 UDP의 주요 차이

연결성 vs 비연결성:

TCP: 연결 지향 프로토콜로, 데이터 전송 전에 연결 설정이 필요하며, 데이터 전송 후에 연결을 해제합니다.
UDP: 비연결성 프로토콜로, 연결 설정이나 해제 과정이 없이 데이터를 전송합니다.

신뢰성:

TCP: 데이터의 순서와 신뢰성을 보장하며, 오류 복구와 흐름 제어를 통해 안정적인 데이터 전송을 제공합니다.
UDP: 데이터의 순서와 신뢰성을 보장하지 않고, 패킷 손실이나 순서 변경이 발생할 수 있습니다.

오버헤드:

TCP: 높은 신뢰성을 위해 연결 설정, 해제 및 데이터 관리와 같은 추가적인 오버헤드가 발생할 수 있습니다.
UDP: 오버헤드가 적고, 빠른 데이터 전송이 가능합니다.

사용 예시:

TCP: 웹 브라우징, 이메일, 파일 전송과 같이 신뢰성이 중요한 애플리케이션에 적합합니다.
UDP: 온라인 게임, 음성/영상 스트리밍, DNS 등 실시간성이나 빠른 전송이 필요한 애플리케이션에 적합합니다.
간단하게 말하면, TCP는 신뢰성을 중요시하며 데이터 순서와 안정성을 보장합니다. 반면에 UDP는 빠른 전송과 실시간성을 중요시하며, 신뢰성은 상대적으로 낮습니다. 어떤 프로토콜을 선택할지는 사용하는 애플리케이션의 특성과 요구사항에 따라 결정됩니다.




TCP server's function call order

socket() 소켓 생성 ---> bind()  소켓 주소 할당 ----> listen() 연결요청 대기상태 ----> accept() 연결 허용 ---> read()/write()  데이터 송수신  ----> close()  연결 종료

TCP client's function call order 

socket() ---> connect() 연결 요청 ----> read()/write() -----> close()



TCP server supports a single client at a time and accpets next client after existing connection is closed.
To solve the single-client issue, we need to create threads for each client. Read and write data in their respective, devoted threads.

UDP 특성상 TCP와 달리 listen()과 accept()함수가 필요없다!



소켓 통신에서 "메시지 버퍼"는 데이터를 임시로 저장하는 메모리 영역이다.  데이터를 전송하거나 받을 때, 크기가 큰 데이터가 나누어져 전송될 수 있다.
메시지 버퍼는 이렇게 나누어진 데이터 조각을 임시로 저장하며, 데이터의 일관성과 안정성을 유지하는 역할을 한다. 
메시지 버퍼의 크기는 설정할 수 있으며, 작게 설정하면 데이터 손실의 위험이 있고, 크게 설정하면 메모리 소비가 늘어날 수 있다.




















